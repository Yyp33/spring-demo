<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

<!-- spring加载顺序是自上而下的加载，如果想让wife提前到person之前加载可以在 person中加入dependon
person依赖wife就会先加载wife
    <bean class="entity.User" id="user"></bean>
    <bean class="entity.Person" id="person" depends-on="wife"></bean>
    <bean class="entity.Wife" id="wife"></bean>-->

<!--    懒加载
 <bean class="entity.User" id="user2" lazy-init="true"></bean>-->

<!--    作用域两种类型 singleton 单例 prototype 多例（原型）每一次使用都会创建
    <bean class="entity.Person" id="person2" scope="singleton"></bean>
    <bean class="entity.Person" id="person3" scope="prototype"></bean>-->

<!--    使用静态方法实例化bean
    <bean class="entity.Person" id="person4" factory-method="createPerson" >
        <constructor-arg name="name" value="1"></constructor-arg>
    </bean>-->

<!--    使用工厂对象创建bean 非静态
    <bean class="entity.PersonFactory" id="personFactory"></bean>
    <bean class="entity.Person" id="person5" factory-bean="personFactory" factory-method="createPerson">
        <constructor-arg name="name" value="2"></constructor-arg>
    </bean>-->

<!--    自动注入 autowire type = byType
    <bean class="entity.Person" id="person6" autowire="byType"></bean>
    <bean class="entity.Wife" id="wife">
        <property name="name" value="自动注入方式注入byType"></property>
    </bean>-->

    <!--    自动注入 autowire type = byName
    <bean class="entity.Person" id="person7" autowire="byName"></bean>
    <bean class="entity.Wife" id="wife">
        <property name="name" value="自动注入方式注入byName,name=wife"></property>
    </bean>
    <bean class="entity.Wife" id="wife1">
        <property name="name" value="自动注入方式注入byName,name=wife1"></property>
    </bean>-->

    <!--    自动注入 autowire type = constructor
    <bean class="entity.Person" id="person8" autowire="constructor"></bean>
    <bean class="entity.Wife" id="wife">
        <property name="name" value="自动注入方式注入construct"></property>
    </bean>-->

    <!--    自动注入 autowire type = byType primary
    <bean class="entity.Person" id="person9" autowire="byType"></bean>
    <bean class="entity.Wife" id="wife">
        <property name="name" value="自动注入方式注入byType"></property>
    </bean>
    <bean class="entity.Wife" id="wife1" primary="true">
        <property name="name" value="自动注入方式注入byType,primary"></property>
    </bean>-->

    <!--    自动注入 autowire type = byType autowire-candidate
    <bean class="entity.Person" id="person9" autowire="byType"></bean>
    <bean class="entity.Wife" id="wife" autowire-candidate="false">
        <property name="name" value="自动注入方式注入byType"></property>
    </bean>
    <bean class="entity.Wife" id="wife1" >
        <property name="name" value="自动注入方式注入byType autowire-candidate"></property>
    </bean>-->
<!-- 自定义生命周期初始化以及销毁方法 实现方式一,实现接口
    <bean class="entity.Person" id="person10">
        <property name="name" value="name"></property>
    </bean>-->
    <!-- 自定义生命周期初始化以及销毁方法 实现方式二:=使用xml配置
        <bean class="entity.Person" id="person11" init-method="initXml" destroy-method="destroyXml">
            <property name="name" value="name"></property>
        </bean>-->
<!--    配置第三方bean
    <bean class="com.alibaba.druid.pool.DruidDataSource" id="dataSource">
        <property name="username" value="root"></property>
        <property name="password" value="123456"></property>
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://192.168.5.128:3306/test"></property>
    </bean>-->

    <!--    配置第三方bean 使用properties文件存储值
    <context:property-placeholder location="db.properties"></context:property-placeholder>
    <bean class="com.alibaba.druid.pool.DruidDataSource" id="dataSource1">
        <property name="username" value="${userName}"></property>
        <property name="password" value="${password}"></property>
        <property name="driverClassName" value="${driveClassName}"></property>
        <property name="url" value="${url}"></property>
    </bean>-->

<!--    Spel 表达式运用-->

    <bean class="entity.Person" id="person14">
<!--        运算表达式-->
        <property name="id" value="#{1*3}"></property>
<!--        引用对象-->
        <property name="wife" value="#{wife}"></property>
        <property name="name" value="#{wife.name}"></property>
        <property name="gender" value="#{wife.getName()}"></property>
        <property name="birthday" value="#{T(entity.Wife).getNowDate()}"></property>
    </bean>
    <bean class="entity.Wife" id="wife">
        <property name="name" value="妻子"></property>
    </bean>
</beans>











































