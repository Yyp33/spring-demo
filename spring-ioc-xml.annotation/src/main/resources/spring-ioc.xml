<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!--扫描注解
        但是使用注解时有如下注解可以对标标记为bean
        @Controller 用于标记控制层的bean
        @Service 用于标记业务逻辑层的bean
        @Repository 用于标记数据访问层的bean
        @Component 用于标记非三层的bean
        这些用于标记哪些类，他们的作用都是相同的。控制层也可以使用@Service
        优点：一、方便代码阅读 二、方便spring或者自己管理 比如我们写aop只限制使用service注解的类
        exclude-filter 用于设置可以排除的不用扫描的类
        include-filter 用于设置需要各位扫描的类
        类型：
            annotation 默认 根据注解的全类名设置排除/包含
            assignable     根据类的全限定名设置排除/包含
            aspectj        根据切面表达式进行设置
            regex          根据正则表达式进行设置
            custom   可以实现org.example.MyTypeFilter 接口的实现类自定义实现
       use-default-filters 默认扫描所有的注解类
    -->
    <!--怎么将一个类注册为bean
        1、配置扫描包 <context:component-scan >
        2、在对应的类上边增加相应的注解
        使用上边的注解会自动将首字母小写并设置为bean的名字即id
    -->
    <context:component-scan base-package="com.yyp" use-default-filters="true">
    <!--<context:exclude-filter type="aspectj" expression="org.springframework.stereotype.Controller"></context:exclude-filter>-->
    <!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:include-filter>-->
    </context:component-scan>

    <!--引入属性文件，测试@value标签注入属性值-->
    <context:property-placeholder location="db.properties"></context:property-placeholder>
</beans>